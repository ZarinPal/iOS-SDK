// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name ZarinPal
import CommonCrypto
import CommonCrypto/*.CC_LONG*/
import CommonCrypto/*.CC_MD5*/
import CommonCrypto/*.CC_MD5_DIGEST_LENGTH*/
import Foundation
import Network
import Swift
import UIKit
import _Concurrency
import zlib
public enum FoundationSecurityError : Swift.Error {
  case invalidRequest
  public static func == (a: ZarinPal.FoundationSecurityError, b: ZarinPal.FoundationSecurityError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class FoundationSecurity {
  public init(allowSelfSigned: Swift.Bool = false)
  @objc deinit
}
extension ZarinPal.FoundationSecurity : ZarinPal.CertificatePinning {
  public func evaluateTrust(trust: Security.SecTrust, domain: Swift.String?, completion: ((ZarinPal.PinningState) -> ()))
}
extension ZarinPal.FoundationSecurity : ZarinPal.HeaderValidator {
  public func validate(headers: [Swift.String : Swift.String], key: Swift.String) -> Swift.Error?
}
public enum SecurityErrorCode : Swift.UInt16 {
  case acceptFailed
  case pinningFailed
  public init?(rawValue: Swift.UInt16)
  public typealias RawValue = Swift.UInt16
  public var rawValue: Swift.UInt16 {
    get
  }
}
public enum PinningState {
  case success
  case failed(CoreFoundation.CFError?)
}
public protocol CertificatePinning : AnyObject {
  func evaluateTrust(trust: Security.SecTrust, domain: Swift.String?, completion: ((ZarinPal.PinningState) -> ()))
}
public protocol HeaderValidator : AnyObject {
  func validate(headers: [Swift.String : Swift.String], key: Swift.String) -> Swift.Error?
}
public enum CloseCode : Swift.UInt16 {
  case normal
  case goingAway
  case protocolError
  case protocolUnhandledType
  case noStatusReceived
  case encoding
  case policyViolated
  case messageTooBig
  public init?(rawValue: Swift.UInt16)
  public typealias RawValue = Swift.UInt16
  public var rawValue: Swift.UInt16 {
    get
  }
}
public enum FrameOpCode : Swift.UInt8 {
  case continueFrame
  case textFrame
  case binaryFrame
  case connectionClose
  case ping
  case pong
  case unknown
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public struct Frame {
}
public enum FrameEvent {
  case frame(ZarinPal.Frame)
  case error(Swift.Error)
}
public protocol FramerEventClient : AnyObject {
  func frameProcessed(event: ZarinPal.FrameEvent)
}
public protocol Framer {
  func add(data: Foundation.Data)
  func register(delegate: ZarinPal.FramerEventClient)
  func createWriteFrame(opcode: ZarinPal.FrameOpCode, payload: Foundation.Data, isCompressed: Swift.Bool) -> Foundation.Data
  func updateCompression(supports: Swift.Bool)
  func supportsCompression() -> Swift.Bool
}
public class WSFramer : ZarinPal.Framer {
  public var compressionEnabled: Swift.Bool
  public init(isServer: Swift.Bool = false)
  public func updateCompression(supports: Swift.Bool)
  public func supportsCompression() -> Swift.Bool
  public func add(data: Foundation.Data)
  public func register(delegate: ZarinPal.FramerEventClient)
  public func createWriteFrame(opcode: ZarinPal.FrameOpCode, payload: Foundation.Data, isCompressed: Swift.Bool) -> Foundation.Data
  @objc deinit
}
public protocol MyWSArrayType {
}
extension Swift.UInt8 : ZarinPal.MyWSArrayType {
}
extension Swift.Array where Element : Swift.UnsignedInteger, Element : ZarinPal.MyWSArrayType {
  public func readUint16(offset: Swift.Int) -> Swift.UInt16
  public func readUint64(offset: Swift.Int) -> Swift.UInt64
  public func unmaskData(maskStart: Swift.Int, offset: Swift.Int, length: Swift.Int) -> Foundation.Data
}
public func writeUint16(_ buffer: inout [Swift.UInt8], offset: Swift.Int, value: Swift.UInt16)
public func writeUint32(_ buffer: inout [Swift.UInt8], offset: Swift.Int, value: Swift.UInt32)
public func writeUint64(_ buffer: inout [Swift.UInt8], offset: Swift.Int, value: Swift.UInt64)
public protocol CompressionHandler {
  func load(headers: [Swift.String : Swift.String])
  func decompress(data: Foundation.Data, isFinal: Swift.Bool) -> Foundation.Data?
  func compress(data: Foundation.Data) -> Foundation.Data?
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class CustomButton : UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum ErrorType : Swift.Error {
  case compressionError
  case securityError
  case protocolError
  case serverError
  public static func == (a: ZarinPal.ErrorType, b: ZarinPal.ErrorType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct WSError : Swift.Error {
  public let type: ZarinPal.ErrorType
  public let message: Swift.String
  public let code: Swift.UInt16
  public init(type: ZarinPal.ErrorType, message: Swift.String, code: Swift.UInt16)
}
public protocol WebSocketClient : AnyObject {
  func connect()
  func disconnect(closeCode: Swift.UInt16)
  func write(string: Swift.String, completion: (() -> ())?)
  func write(stringData: Foundation.Data, completion: (() -> ())?)
  func write(data: Foundation.Data, completion: (() -> ())?)
  func write(ping: Foundation.Data, completion: (() -> ())?)
  func write(pong: Foundation.Data, completion: (() -> ())?)
}
extension ZarinPal.WebSocketClient {
  public func write(string: Swift.String)
  public func write(data: Foundation.Data)
  public func write(ping: Foundation.Data)
  public func write(pong: Foundation.Data)
  public func disconnect()
}
public enum WebSocketEvent {
  case connected([Swift.String : Swift.String])
  case disconnected(Swift.String, Swift.UInt16)
  case text(Swift.String)
  case binary(Foundation.Data)
  case pong(Foundation.Data?)
  case ping(Foundation.Data?)
  case error(Swift.Error?)
  case viabilityChanged(Swift.Bool)
  case reconnectSuggested(Swift.Bool)
  case cancelled
}
public protocol WebSocketDelegate : AnyObject {
  func didReceive(event: ZarinPal.WebSocketEvent, client: ZarinPal.WebSocket)
}
open class WebSocket : ZarinPal.WebSocketClient, ZarinPal.EngineDelegate {
  weak public var delegate: ZarinPal.WebSocketDelegate?
  public var onEvent: ((ZarinPal.WebSocketEvent) -> Swift.Void)?
  public var request: Foundation.URLRequest
  public var callbackQueue: Dispatch.DispatchQueue
  public var respondToPingWithPong: Swift.Bool {
    get
    set
  }
  public init(request: Foundation.URLRequest, engine: ZarinPal.Engine)
  convenience public init(request: Foundation.URLRequest, certPinner: ZarinPal.CertificatePinning? = FoundationSecurity(), compressionHandler: ZarinPal.CompressionHandler? = nil, useCustomEngine: Swift.Bool = true)
  public func connect()
  public func disconnect(closeCode: Swift.UInt16 = CloseCode.normal.rawValue)
  public func forceDisconnect()
  public func write(data: Foundation.Data, completion: (() -> ())?)
  public func write(string: Swift.String, completion: (() -> ())?)
  public func write(stringData: Foundation.Data, completion: (() -> ())?)
  public func write(ping: Foundation.Data, completion: (() -> ())?)
  public func write(pong: Foundation.Data, completion: (() -> ())?)
  public func didReceive(event: ZarinPal.WebSocketEvent)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ZarinPalBillingClient {
  public static func newBuilder(viewController: UIKit.UIViewController) -> ZarinPal.ZarinPalBillingClient.Builder
  public func launchBillingFlow(purchase: ZarinPal.Purchase)
  public func querySkuPurchased(query: ZarinPal.SkuQueryParams, completion: @escaping ([ZarinPal.SkuPurchased]?) -> Swift.Void)
  @_hasMissingDesignatedInitializers public class Builder {
    public func setDelegate(_ delegate: ZarinPal.PaymentDelegate) -> ZarinPal.ZarinPalBillingClient.Builder
    public func build() -> ZarinPal.ZarinPalBillingClient
    @objc deinit
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
public class NativeEngine : ObjectiveC.NSObject, ZarinPal.Engine, Foundation.URLSessionDataDelegate, Foundation.URLSessionWebSocketDelegate {
  public func register(delegate: ZarinPal.EngineDelegate)
  public func start(request: Foundation.URLRequest)
  public func stop(closeCode: Swift.UInt16)
  public func forceStop()
  public func write(string: Swift.String, completion: (() -> ())?)
  public func write(data: Foundation.Data, opcode: ZarinPal.FrameOpCode, completion: (() -> ())?)
  @objc public func urlSession(_ session: Foundation.URLSession, webSocketTask: Foundation.URLSessionWebSocketTask, didOpenWithProtocol protocol: Swift.String?)
  @objc public func urlSession(_ session: Foundation.URLSession, webSocketTask: Foundation.URLSessionWebSocketTask, didCloseWith closeCode: Foundation.URLSessionWebSocketTask.CloseCode, reason: Foundation.Data?)
  @objc override dynamic public init()
  @objc deinit
}
public class WSCompression : ZarinPal.CompressionHandler {
  public init()
  public func load(headers: [Swift.String : Swift.String])
  public func decompress(data: Foundation.Data, isFinal: Swift.Bool) -> Foundation.Data?
  public func compress(data: Foundation.Data) -> Foundation.Data?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SkuQueryParams {
  public static func newBuilder(merchantID: Swift.String) -> ZarinPal.SkuQueryParams.Builder
  @_hasMissingDesignatedInitializers public class Builder {
    public func orderByMobile(_ value: Swift.String) -> ZarinPal.SkuQueryParams.Builder
    public func orderByEmail(_ value: Swift.String) -> ZarinPal.SkuQueryParams.Builder
    public func orderByCardPan(_ value: Swift.String) -> ZarinPal.SkuQueryParams.Builder
    public func setSkuList(_ values: [Swift.String]) -> ZarinPal.SkuQueryParams.Builder
    public func merchantID() -> Swift.String?
    public func orderByMobile() -> Swift.String?
    public func orderByEmail() -> Swift.String?
    public func orderByCardPan() -> Swift.String?
    public func skuList() -> [Swift.String]?
    public func build() -> ZarinPal.SkuQueryParams
    @objc deinit
  }
  @objc deinit
}
public enum PurchaseType : Swift.String, Swift.Codable {
  case ALL, SHETAB
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum FoundationTransportError : Swift.Error {
  case invalidRequest
  case invalidOutputStream
  case timeout
  public static func == (a: ZarinPal.FoundationTransportError, b: ZarinPal.FoundationTransportError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc public class FoundationTransport : ObjectiveC.NSObject, ZarinPal.Transport, Foundation.StreamDelegate {
  public var usingTLS: Swift.Bool {
    get
  }
  public init(streamConfiguration: ((Foundation.InputStream, Foundation.OutputStream) -> Swift.Void)? = nil)
  @objc deinit
  public func connect(url: Foundation.URL, timeout: Swift.Double = 10, certificatePinning: ZarinPal.CertificatePinning? = nil)
  public func disconnect()
  public func register(delegate: ZarinPal.TransportEventClient)
  public func write(data: Foundation.Data, completion: @escaping ((Swift.Error?) -> ()))
  @objc open func stream(_ aStream: Foundation.Stream, handle eventCode: Foundation.Stream.Event)
}
@_hasMissingDesignatedInitializers public class FoundationHTTPServerHandler : ZarinPal.HTTPServerHandler {
  public func register(delegate: ZarinPal.HTTPServerDelegate)
  public func createResponse(headers: [Swift.String : Swift.String]) -> Foundation.Data
  public func parse(data: Foundation.Data)
  @objc deinit
}
public enum HTTPUpgradeError : Swift.Error {
  case notAnUpgrade(Swift.Int)
  case invalidData
}
public struct HTTPWSHeader {
  public static func createUpgrade(request: Foundation.URLRequest, supportsCompression: Swift.Bool, secKeyValue: Swift.String) -> Foundation.URLRequest
  public static func generateWebSocketKey() -> Swift.String
}
public enum HTTPEvent {
  case success([Swift.String : Swift.String])
  case failure(Swift.Error)
}
public protocol HTTPHandlerDelegate : AnyObject {
  func didReceiveHTTP(event: ZarinPal.HTTPEvent)
}
public protocol HTTPHandler {
  func register(delegate: ZarinPal.HTTPHandlerDelegate)
  func convert(request: Foundation.URLRequest) -> Foundation.Data
  func parse(data: Foundation.Data) -> Swift.Int
}
public protocol HTTPServerDelegate : AnyObject {
  func didReceive(event: ZarinPal.HTTPEvent)
}
public protocol HTTPServerHandler {
  func register(delegate: ZarinPal.HTTPServerDelegate)
  func parse(data: Foundation.Data)
  func createResponse(headers: [Swift.String : Swift.String]) -> Foundation.Data
}
public struct URLParts {
}
extension Foundation.URL {
  public var isTLSScheme: Swift.Bool {
    get
  }
  public func getParts() -> ZarinPal.URLParts?
}
@_hasMissingDesignatedInitializers public class Purchase {
  public var purchase: ZarinPal.Purchase?
  public var purchaseType: ZarinPal.PurchaseType
  public static func newBuilder() -> ZarinPal.Purchase.Builder
  @_hasMissingDesignatedInitializers public class Builder {
    public func asPaymentRequest(merchantID: Swift.String, amount: Swift.Int64, callbackURL: Swift.String, description: Swift.String, mobile: Swift.String, email: Swift.String) -> ZarinPal.Purchase.Builder
    public func asPaymentRequest(merchantID: Swift.String, amount: Swift.Int64, callbackURL: Swift.String, description: Swift.String) -> ZarinPal.Purchase.Builder
    public func asAuthority(authority: Swift.String) -> ZarinPal.Purchase.Builder
    public func asSku(id: Swift.String) -> ZarinPal.Purchase.Builder
    public func setType(type: ZarinPal.PurchaseType) -> ZarinPal.Purchase.Builder
    public func build() -> ZarinPal.Purchase
    @objc deinit
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class AuthorityPurchase : ZarinPal.Purchase {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SKUPurchase : ZarinPal.Purchase {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class DirectlyPurchase : ZarinPal.Purchase {
  @objc deinit
}
extension Foundation.Bundle {
  public var icon: UIKit.UIImage? {
    get
  }
}
public class WSEngine : ZarinPal.Engine, ZarinPal.TransportEventClient, ZarinPal.FramerEventClient, ZarinPal.FrameCollectorDelegate, ZarinPal.HTTPHandlerDelegate {
  public var respondToPingWithPong: Swift.Bool
  public init(transport: ZarinPal.Transport, certPinner: ZarinPal.CertificatePinning? = nil, headerValidator: ZarinPal.HeaderValidator = FoundationSecurity(), httpHandler: ZarinPal.HTTPHandler = FoundationHTTPHandler(), framer: ZarinPal.Framer = WSFramer(), compressionHandler: ZarinPal.CompressionHandler? = nil)
  public func register(delegate: ZarinPal.EngineDelegate)
  public func start(request: Foundation.URLRequest)
  public func stop(closeCode: Swift.UInt16 = CloseCode.normal.rawValue)
  public func forceStop()
  public func write(string: Swift.String, completion: (() -> ())?)
  public func write(data: Foundation.Data, opcode: ZarinPal.FrameOpCode, completion: (() -> ())?)
  public func connectionChanged(state: ZarinPal.ConnectionState)
  public func didReceiveHTTP(event: ZarinPal.HTTPEvent)
  public func frameProcessed(event: ZarinPal.FrameEvent)
  public func decompress(data: Foundation.Data, isFinal: Swift.Bool) -> Foundation.Data?
  public func didForm(event: ZarinPal.FrameCollector.Event)
  @objc deinit
}
public protocol FrameCollectorDelegate : AnyObject {
  func didForm(event: ZarinPal.FrameCollector.Event)
  func decompress(data: Foundation.Data, isFinal: Swift.Bool) -> Foundation.Data?
}
@_hasMissingDesignatedInitializers public class FrameCollector {
  public enum Event {
    case text(Swift.String)
    case binary(Foundation.Data)
    case pong(Foundation.Data?)
    case ping(Foundation.Data?)
    case error(Swift.Error)
    case closed(Swift.String, Swift.UInt16)
  }
  public func add(frame: ZarinPal.Frame)
  @objc deinit
}
public class FoundationHTTPHandler : ZarinPal.HTTPHandler {
  public init()
  public func convert(request: Foundation.URLRequest) -> Foundation.Data
  public func parse(data: Foundation.Data) -> Swift.Int
  public func register(delegate: ZarinPal.HTTPHandlerDelegate)
  @objc deinit
}
public class StringHTTPHandler : ZarinPal.HTTPHandler {
  public init()
  public func convert(request: Foundation.URLRequest) -> Foundation.Data
  public func parse(data: Foundation.Data) -> Swift.Int
  public func register(delegate: ZarinPal.HTTPHandlerDelegate)
  @objc deinit
}
@objc(NotificationsItem) public protocol PaymentDelegate {
  @objc func didReceive(receipt: [Swift.String : Any]?, raw: Swift.String?)
  @objc func didException(exception: Foundation.NSException)
  @objc func didClose()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class CustomUIView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum ConnectionEvent {
  case connected([Swift.String : Swift.String])
  case disconnected(Swift.String, Swift.UInt16)
  case text(Swift.String)
  case binary(Foundation.Data)
  case pong(Foundation.Data?)
  case ping(Foundation.Data?)
  case error(Swift.Error)
}
public protocol Connection {
  func write(data: Foundation.Data, opcode: ZarinPal.FrameOpCode)
}
public protocol ConnectionDelegate : AnyObject {
  func didReceive(event: ZarinPal.ServerEvent)
}
public enum ServerEvent {
  case connected(ZarinPal.Connection, [Swift.String : Swift.String])
  case disconnected(ZarinPal.Connection, Swift.String, Swift.UInt16)
  case text(ZarinPal.Connection, Swift.String)
  case binary(ZarinPal.Connection, Foundation.Data)
  case pong(ZarinPal.Connection, Foundation.Data?)
  case ping(ZarinPal.Connection, Foundation.Data?)
}
public protocol Server {
  func start(address: Swift.String, port: Swift.UInt16) -> Swift.Error?
}
public enum TCPTransportError : Swift.Error {
  case invalidRequest
  public static func == (a: ZarinPal.TCPTransportError, b: ZarinPal.TCPTransportError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 10.14, iOS 12.0, watchOS 5.0, tvOS 12.0, *)
public class TCPTransport : ZarinPal.Transport {
  public var usingTLS: Swift.Bool {
    get
  }
  public init(connection: Network.NWConnection)
  public init()
  public func connect(url: Foundation.URL, timeout: Swift.Double = 10, certificatePinning: ZarinPal.CertificatePinning? = nil)
  public func disconnect()
  public func register(delegate: ZarinPal.TransportEventClient)
  public func write(data: Foundation.Data, completion: @escaping ((Swift.Error?) -> ()))
  @objc deinit
}
public struct SkuPurchased : Swift.Codable {
  public var product_id: Swift.String
  public var authority: Swift.String
  public var amount: Swift.Int32
  public var date: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Receipt : Swift.Codable {
  public var status: Swift.String?
  public var amount: Swift.Int64?
  public var description: Swift.String?
  public var date: Swift.String?
  public var message: Swift.String?
  public var provider: Swift.String?
  public var redirect_url: Swift.String?
  public var ref_id: Swift.Int64?
  public var receipt: ZarinPal.ReceiptUser?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ReceiptShaparakNotOk : Swift.Codable {
  public var status: Swift.String
  public var amount: Swift.Int64
  public var description: Swift.String
  public var date: Swift.String
  public var message: Swift.String?
  public var ref_id: Swift.Int64
  public var receipt: ZarinPal.ReceiptUser?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ReceiptUser : Swift.Codable {
  public var user: ZarinPal.User?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct User : Swift.Codable {
  public var name: Swift.String?
  public var avatar: Swift.String?
  public var title: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum ConnectionState {
  case connected
  case waiting
  case cancelled
  case failed(Swift.Error?)
  case viability(Swift.Bool)
  case shouldReconnect(Swift.Bool)
  case receive(Foundation.Data)
}
public protocol TransportEventClient : AnyObject {
  func connectionChanged(state: ZarinPal.ConnectionState)
}
public protocol Transport : AnyObject {
  func register(delegate: ZarinPal.TransportEventClient)
  func connect(url: Foundation.URL, timeout: Swift.Double, certificatePinning: ZarinPal.CertificatePinning?)
  func disconnect()
  func write(data: Foundation.Data, completion: @escaping ((Swift.Error?) -> ()))
  var usingTLS: Swift.Bool { get }
}
public protocol EngineDelegate : AnyObject {
  func didReceive(event: ZarinPal.WebSocketEvent)
}
public protocol Engine {
  func register(delegate: ZarinPal.EngineDelegate)
  func start(request: Foundation.URLRequest)
  func stop(closeCode: Swift.UInt16)
  func forceStop()
  func write(data: Foundation.Data, opcode: ZarinPal.FrameOpCode, completion: (() -> ())?)
  func write(string: Swift.String, completion: (() -> ())?)
}
@available(macOS 10.14, iOS 12.0, watchOS 5.0, tvOS 12.0, *)
@available(watchOS, unavailable)
public class WebSocketServer : ZarinPal.Server, ZarinPal.ConnectionDelegate {
  public var onEvent: ((ZarinPal.ServerEvent) -> Swift.Void)?
  public init()
  public func start(address: Swift.String, port: Swift.UInt16) -> Swift.Error?
  public func didReceive(event: ZarinPal.ServerEvent)
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(macOS 10.14, iOS 12.0, watchOS 5.0, tvOS 12.0, *)
public class ServerConnection : ZarinPal.Connection, ZarinPal.HTTPServerDelegate, ZarinPal.FramerEventClient, ZarinPal.FrameCollectorDelegate, ZarinPal.TransportEventClient {
  public var onEvent: ((ZarinPal.ConnectionEvent) -> Swift.Void)?
  weak public var delegate: ZarinPal.ConnectionDelegate?
  public func write(data: Foundation.Data, opcode: ZarinPal.FrameOpCode)
  public func connectionChanged(state: ZarinPal.ConnectionState)
  public func didReceive(event: ZarinPal.HTTPEvent)
  public func frameProcessed(event: ZarinPal.FrameEvent)
  public func didForm(event: ZarinPal.FrameCollector.Event)
  public func decompress(data: Foundation.Data, isFinal: Swift.Bool) -> Foundation.Data?
  @objc deinit
}
extension ZarinPal.FoundationSecurityError : Swift.Equatable {}
extension ZarinPal.FoundationSecurityError : Swift.Hashable {}
extension ZarinPal.SecurityErrorCode : Swift.Equatable {}
extension ZarinPal.SecurityErrorCode : Swift.Hashable {}
extension ZarinPal.SecurityErrorCode : Swift.RawRepresentable {}
extension ZarinPal.CloseCode : Swift.Equatable {}
extension ZarinPal.CloseCode : Swift.Hashable {}
extension ZarinPal.CloseCode : Swift.RawRepresentable {}
extension ZarinPal.FrameOpCode : Swift.Equatable {}
extension ZarinPal.FrameOpCode : Swift.Hashable {}
extension ZarinPal.FrameOpCode : Swift.RawRepresentable {}
extension ZarinPal.ErrorType : Swift.Equatable {}
extension ZarinPal.ErrorType : Swift.Hashable {}
extension ZarinPal.PurchaseType : Swift.Equatable {}
extension ZarinPal.PurchaseType : Swift.Hashable {}
extension ZarinPal.PurchaseType : Swift.RawRepresentable {}
extension ZarinPal.FoundationTransportError : Swift.Equatable {}
extension ZarinPal.FoundationTransportError : Swift.Hashable {}
extension ZarinPal.TCPTransportError : Swift.Equatable {}
extension ZarinPal.TCPTransportError : Swift.Hashable {}
